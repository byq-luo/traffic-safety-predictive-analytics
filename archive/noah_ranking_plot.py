xgb_ranking = panos_ranking(pred_xgb, y_test)
plt.plot(xgb_ranking['pred_rank'], xgb_ranking['Perfect_TotalGainOverRandom'], color='blue')
plt.plot(xgb_ranking['pred_rank'], xgb_ranking['TotalGainOverRandom'], color='red')
plt.xlabel('Pred Rank Position')
plt.title('Perfect_TotalGainOverRandom & Xgboost TotalGainOverRandom')
plt.gca().legend(('Perfect_TotalGainOverRandom','Xgboost TotalGainOverRandom'))
plt.show()

negbinom_ranking = panos_ranking(pred_nb, y_test)
plt.plot(negbinom_ranking['pred_rank'], negbinom_ranking['Perfect_TotalGainOverRandom'], color='blue')
plt.plot(negbinom_ranking['pred_rank'], negbinom_ranking['TotalGainOverRandom'], color='red')
plt.xlabel('Pred Rank Position')
plt.title('Perfect_TotalGainOverRandom & NegBinom TotalGainOverRandom')
plt.gca().legend(('Perfect_TotalGainOverRandom','NegBinom TotalGainOverRandom'))
plt.show()

knn_ranking = panos_ranking(pred_knn, y_test2)
plt.plot(knn_ranking['pred_rank'], knn_ranking['Perfect_TotalGainOverRandom'], color='blue')
plt.plot(knn_ranking['pred_rank'], knn_ranking['TotalGainOverRandom'], color='red')
plt.xlabel('Pred Rank Position')
plt.title('Perfect_TotalGainOverRandom & KNN TotalGainOverRandom')
plt.gca().legend(('Perfect_TotalGainOverRandom','KNN TotalGainOverRandom'))
plt.show()
